
#{ Consider a type with abstractions, such as #((a->a)->a)->a->a# with
inhabitants #M=\f,x.N# for #N=#
#[
    x
    f I
    f(K x)
    
#]
where we can enumerate via
#[
    x:a
    f:(aa)a
    I,K x:aa
    f I,f(K x):a
    (K.f I),(K.f.K I):aa
    (f.K.f I),(f.K.f.K I):a
#]
where of course we are enumerating terms in the nonassociative multi-sorted
algebra 
#[
  x:a
  K:a->aa
  I:aa
  f:aa->a
  
#]
#}
tp_basis := Stream close.
tp_name := tp_basis->(Y\t. Sum close. Square t). #not quite right
tp_terms := (/\b:tp_basis. stream & ???).
build_tp := tp_name->tp_basis->close (
    build_tp_from := tp_name->tp_basis->tp_terms->close (
        
    ).
    no_terms := const_stream empty_list.
    \name,basis.
    build_tp_from name basis no_terms.
).

