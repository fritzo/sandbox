
#{ The inhabitation logic of types requires that, e.g., #Prod a a'=Top# if
either #a# or #a'# is top, howerver this is not true in Scott's
types-as-closures framework.
The types-as-closure-check-pairs framework suggests a solution:
#[
    Check := close->close (\a.a->unit).
    type := close (\<p,c>:pair.<p&W c, Check p c>).
    Prod := type->type->type (
        \<p,c>,<p',c'>.
        patch := (\<x,x'>:pair. <a x,a' x'>).
        check := (\<x,x'>. and_unit (c x) (c' x')).
        <patch,check>.
    ).
#]
however this category is not cartesian closed: in particular exponentials
require ``domain enumerators'' which are not provided by the types.
Adding eunmerators, we see that
#[
    Enum := close->close (\a.(a->unit)->unit).
    type := close (\<p,c,e>:tuple 3. <p&W c, Check p c|e c, Enum a>).
    Prod := type->type->type (
        \<p,c,e>,<p',c',e'>.
        patch := (\<x:p,x':p'>:pair. <x,x'>).
        check := (\<x,x'>. and_unit (c x) (c' x')).
        enum := <\<x,x'>. >.
        enum := (\phi. e\x. e'\x'. phi<x,x'>).
        <patch,check,enum>.
    ).
#]
however in attempting to define the exponential...
#[
    Exp := type->type->type (
        \<p,c,e>,<p',c',e'>.
        patch := (\f.p'*f*p). ## = p->p'.
        check := (\f. e c'*f).
        enum := (\phi. ???). #XXX: what is this
        <patch,check,enum>.
    ).
#]
things don't quite work.

What signature provides the required structure?
What if there are subobject classifiers, i.e., for each...
#}

