
#\Ex{ church ordinals: #((aa)a)(aa)aa#
patch_On := (
    lower_0 := (\x.x Top).           ## = <Top>
    raise_0 := (\x,_.x).             ## = K
    lower_1 := raise_0->lower_0.
    raise_1 := lower_0->raise_0.
    lower_2 := raise_1->lower_0.
    raise_2->raise_1->raise_0->lower_0
).

#now there are two checks: one for well-typedness, as proscribed by the simple
#type, and one for monotonicity of limit functions.
check_monotone := Check nat->nat (
    \s.
    Join n_1<!=n_2 in nats.
    assert (s n_1 <!= s n_2)
).
    
#####but we know in addition that the limit function must depend only on tails.
#####define the type
####nat := ...
####succ := ...
####pred := ...
####pred_nat := \n,z,s. is_zero n z (s. pred n).
####all_nats := semiset nat ((Y\y,n.<n> | y(succ n)) zero).
####fun_of_tail := Subtype (Endo*Endo nat) (
####    #XXX: this is wrong...
####    pop  := (\f,s. f. \i. s. succ i).
####    push := (\f,s. f. \i. pred_nat i Bot s).
####    pop & push
####).

check_On_typed := (
    #join over an unavoidable set
    Join n_1,n_2=>0.
    n := n_1+1+n_2.

    #define objects of the inhabitation category
    label := selector 3.
    enc := \l:label, args. mk_tup (1+n) <l,args>.
    enc_1 := (\f. enc [1/3] <f>).   #for #lim:(nat->nat)->nat
    enc_2 := (\n. enc [2/3] <n>).   #for #succ:nat->nat
    enc_3 := (\.  enc [2/3] <> ).   #for #zero:nat
    dec := n<Top>;<[1/1+n]>.

    #define arrows of the inhabitation category
    arr_12 := (\<w:label, x>.
        if (w == [1/3]).
        f := x[1/1].
        assert (dec f [1/2] == [2/3]).
        f
    ).
    arr_23 := (\<w:label, x>.
        if (w == [2/3]).
        n := x[1/1].
        assert (dec n [1/2] == [3/3]).
        n
    ).

    #test dependence on some argument deep in the tree
    semi \x.
    <q enc_1 enc_2 enc_3>.
    arr_1 & ??? & ???;

    #extract out #x
    n_1<Top>;<x>;n_2<Top>;
    <[1+n_1+1 / 1+n]>
).
# }

#\Ex{ tree: #(any->b)->(b->b->b)->b#
patch_Tree := (I->K) -> (<Top>-><Top>->K) -> <Top>.
check_tree := (\q.
    #join over an unavoidable set
    Join n_1,n_2=>0.
    n := n_1+1+n_2.

    #define objects
    label := bool.
    enc_1 := (\a.    mk_tup (1+n) <[1/2], <a>>.
    enc_2 := (\b,b'. mk_tup (1+n) <[2/2], <b,b'>>.

    #define arrows
    arr_1 := n<Top>; <[1/1+n]>; (
        \<w:label,x>.
        if (w = [1/2]) (
            a := x[1/2].
            assert (dec a [1/2] = [2/2]).
            a
        )
    ).

    #test dependence on some argument deep in the tree
    semi \x.
    <q enc_1 enc_2>.
    (Y\y,t.t
        |(<t>. n<Top>;<[1/1+n]>;(\<w:bool,u>.if (w=K). u[1/1]))
        |(<t>. n<Top>;<[1/1+n]>;(\<w:bool,u>.if (w=F). u[1/2]))
        |(<t>. n<Top>;<[1/1+n]>;(\<w:bool,u>.if (w=F). u[2/2]))
    )
    n_1<Top>;<x>;n_2<Top>;
    <[1+n_1+1 / 1+n]>
).
# }

#\Ex{ a type with abstractions: #((a->b)->c)->b->c#
patch_ex2 := (\q,f,g.q
    (\ab,a,_. f(\a,_.ab a Top)(a Top))
    (\_. g)
    Top
).

check_ex2 := (\q.
    #join over an unavoidable set
    Join n_1,n_2=>0.
    n := n_1+1+n_2.

    #define objects of the inhabitation category
    label := bool.
    enc_1 := (\ab. mk_tup (1+n) <[1/2], <ab>>.  #for #f:(a->b)->c
    enc_2 := (     mk_tup (1+n) <[2/2], <>  >.  #for #y:b
    dec := n<Top>;<[1/1+n]>.

    #define arrows of the inhabitation category
    arr_1 := (
        \<w:label,x>.
        if (w = [1/2]) (
            ab := x[1/2].
            b := ab Top. # #ab# must be #K b#
            assert (dec b [1/2] = [2/2]).
            b
        )
    ).
    arr_2 := (
        \<w:label,x>.
        if (w = [1/2]) (
            ab := x[1/2].
            b := ab Top.
            assert (dec b [1/2] = [2/2]).
            b
        )
    ).
    arr_2 := 

    #test dependence on some argument deep in the tree
    semi \x.
    <q enc1 enc2>.
    dec*arr_1 & dec*arr_2
        |(<t>. n<Top>;<[1/1+n]>;(\<w:bool,u>.if (w=K). u[1/1]))
        |(<t>. n<Top>;<[1/1+n]>;(\<w:bool,u>.if (w=F). u[1/2]))
        |(<t>. n<Top>;<[1/1+n]>;(\<w:bool,u>.if (w=F). u[2/2]))
    )
    n_1<Top>;<x>;n_2<Top>;
    <[1+n_1+1 / 1+n]>
).
# }
###a                   y:b
###a                ---------
###a    f:(ab)c     \x.y:a->b
###a    ---------------------
###a    \fy.f(\x.y):((ab)c)bc

#\Ex{ a type with abstractions: #((a->a)->a)->a#
???
patch_ex3 := (
    Ra := K.
    La := <Top>.
    Raa := La->Ra.
    Laa_a := Raa->La.
    Laa_a->La->Ra
).
check_ex3 := (
    #join over an unavoidable set
    Join n_1,n_2=>0.
    n := n_1+1+n_2.

    enc := (\f. mk_tup (1+n) f).
    dec := ???.

    semi \x.
    <q enc>.
    close (dec ???);
    n_1<Top>;<x>;n_2<Top>;
    <[1+n_1+1 / 1+n]>
).
# }

#{ \Ex{ Nonstandard booleans: # {I,K} #.
The notable difference here is that the head variable of #I,K# can take variously-many arguments.
#}
patch_IK := (Join n=>0. <[2+n/2+n], Top>; n<Top>; <\_.I, K>).
#{ \Lem{ #patch_IK# patches # {I,K} #. }
\Pf{ First to show #I,K# are fixed, we have for each #n#,
#[
    patch_IK_n I = I [2+n/2+n] Top Top^^n (\_.I) K
        = [2+n/2+n] Top Top^^n (\_.I) K
        = (\_.I) K
        = I
    patch_IK_n K = K [2+n/2+n] Top Top^^n (\_.I) K
        = [2+n/2+n] Top^^n (\_.I) K
        = K
#]

    Now suppose #M!=Bot# approximates either #I# or #K#.
    \items{
    \item If #M[=I# then #M=]\x,y_1,...,y_n.x Bot^^n# for some #n#.  Then
#[
    patch_IK M =] M [2+n/2+n] Top Top^^n (\_.I) K
        = [2+n/2+n] Bot^^n Top (\_.I) K 
        = (\_.I) K
        = I
#]
    \item If #M[=I# then #M=]\x,y_1,...,y_n.x Bot^^n-1# for some #n#.  Then
#[
    patch_IK M =] M [n+2/2+n] Top Top^^n (\_.I) K
        = [2+n/2+n] Bot^^n (\_.I) K
        = K
#]
    }
}
#}
check_IK := (\q.
    Join n_1,n_2=>0.
    n := n_1+2+n_2.

    decode := n_1<Top>; <[2+n_1+1 / 2+n]>.

    semi \x.
    <q>.<\y. mk_tup (2+n) <[1/3],<>>  (\_. <[2/3],<y>>) >;
        <\.  mk_tup (2+n) <[3/3],<>>  Top               >;
        <> & (
            decode; \<w,x>.
            if (w = [2/3]).
            y := x[1/1].
            assert (y decode [1/2] = [3/3]).
        );
        n_1<Top>; <\_.x>; <x>; n_2<Top>;
        [2+n_1+1 / 2+n]
).
#{
\Lem{ #check_IK# checks # {I,K} #. }
\Pf{
}
}

\Ex{ finite types: # {I,K,B,C,W,S} #
recall that
#[
    I = \x.x            ##:a->a
    K = \x,y.x          ##:a->b->a
    B = \x,y,z.x(y z)   ##:(a->b)->(c->a)->c->b
    C = \x,y,z.x z y    ##:(a->b->c)->b->a->c
    W = \x,y.x y y      ##:(a->a->b)->a->b
    S = \x,y,z.x z(y z) ##:(a->b->c)->(b->a)->b->c
#]
so the full domain will contain in addition
#[
    Bot                 ##[=I,K,B,C,W,S
    \x,y.x Bot          ##[=I,B,
    \x,y,z.x Bot Bot    ##[=I,C,S
    \x,y,z.x z Bot      ##[=C,S
#]
In indexed-join form, we can simply traverse the decision tree:
#[
patch_IKBCWS := (
    Join n=>0.
    \q.<q>.
    <[3+n/3+n]>;
    <[3+n/3+n]>;
    <[3+n/3+n]>;
    n<Top>;
    <\_,_. [3/3]>;  #for #W
    <\_. [2/3]>;    #for #I,C,S
    <\. [1/3]>;     #for #K,B

    #XXX: this is too weak
    (q I (K B) K)       ##\x,y,z.x _: #K,B#?
    (q K I              ##\x,y,z.x _ _: #I,C,S#?
        (q F K I C S))  ##\x,y,z.x z _#: #C,S#?
    (W)                 ##\x,y,z.x _ _ _#: #W#.
).
check_IKBCWS := (\q.
    Join n_1,n_2=>0.
    n := n_1+1+n_2.

    
).
# }

