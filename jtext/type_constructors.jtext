
#nil: #a#?
repair_nil := Top.
fill_nil := (\n,x.n x Top).
push_nil := (\n,x.n Top x).
fill_nil := (\n,x.n x Bot).
push_nil := (\n,x.n Bot x).
div_nil := div*Bot.
pull_nil := (\n,x.n).

#semi: #a->a#
repair_semi := <I>.
fill_semi := (\i,x,y.i(\y,_.x y)y Top).
push_semi := (\i,x,y.i(\_,y.x y)Top y).
fill_semi' := (\i,x,y.i(\y,d.div d|x y)y Bot).
push_semi' := (\i,x,y.i(\d,y.div d|x y)Bot y).
div_semi := div*<Bot>.
pull_semi := (\i,x,y.i(x y)).
semi := fill_semi & push_semi & repair_semi & div*div_semi;
!check (\x,y,d.div d|x y) = (\x,y,d.x y|div d).
!check (\x,d,y.div d|x y) = (\x,d,y.x y|div d).

#bool: #a->a->a#
repair_bool := <K,F>.
div_bool := <Bot,Bot>.
pull_bool := (\b,x,x',y.b(x y)(x' y)).
fill_bool := (\b,x,x',y.b(\y,_.x y)(\y,_.x' y)y Top).
#fill_bool := (\b,x,x',y.(\x,x',y,_.b x x' y)x x' y Top).
push_bool := (\b,x,x',y.b(\_,y.x y)(\_,y.x' y)Top y).
filldbool' := (\b,x,x',y.b(\y,d.div d|x y)(\y,d.div d|x' y)y Bot).
pushdbool' := (\b,x,x',y.b(\d,y.div d|x y)(\d,y.div d|x' y)Bot y).

#semiset: #a->b->b#?
repair_sset := <C I>.                       # = (\<x>.<x>)
fill_sset := (\s,x,y.s(\m,y,_.x m y)y Top).
push_sset := (\s,x,y.s(\m,_,y.x m y)Top y).
fill_sset' := (\s,x,y.s(\m,y,d.div dx m y)y Bot).
push_sset' := (\s,x,y.s(\m,d,y.div dx m y)Bot y).
div_sset := div*<Bot>.
pull_sset := (\s,x,y.s(\m.x m y)).

#semiset2: #(a->a->b)->b#?
repair_sset2 := <C*(C I)>.                  # = (\<x,y>.<x,y>)
fill_sset2 := (\s,x,y.s(\m,m',y,_.x m m' y)y Top).
push_sset2 := (\s,x,y.s(\m,m',_,y.x m m' y)Top y).
fill_sset2' := (\s,x,y.s(\m,m',y,d.div d|x m m' y)y Bot).
push_sset2' := (\s,x,y.s(\m,m',d,y.div d|x m m' y)Bot y).
div_sset2 := div*<Bot>.
pull_sset2 := (\s,x,y.s(\m,m'.x m m' y)).

#church numeral: #(a->a)->(a->a)#
repair_nat := <S B,K>.          # = <\n,f.f*(n f), \f,x.x>
fill_nat := (\n,f,x,y.n
    (\x',y,_.f(\y.x' y Top)y)   #fill #f#
    (\y,_.x y)                  #fill #x#
    y Top
).
push_nat := (\n,f,x,y.n
    (\x',_,y.f(\y.x' Top y)y)   #push #f#
    (\_,y.x y)                  #push #x#
    Top y
).
fill_nat' := (\n,f,x,y.n
    (\x',y,d.div d|f(\y.x' y Bot)y) #fill #f#
    (\y,d.div d|x y)                #fill #x#
    y Bot
).
push_nat' := (\n,f,x,y.n
    (\x',d,y.div d|f(\y.x' Bot y)y) #push #f#
    (\d,y.div d|x y)                #push #x#
    Bot y
).
div_nat := div*<I,Bot>.
pull_nat := (\n,f,x,y,z.n       #weak
    <<\x.f(x F)y z, f(x F)>>
    <<x y z,x>>
    K
).
nat := fill_nat & fill_nat' & push_nat & push_nat' & repair_nat & div_nat.
#{
\Ex{ #\f,x.f x Bot#:
apply #push#
#[
    push (\f,x.f x Bot)
        = \f,x,y.(\x',_,y.f(\y.x' Top y)y)(\_,y.x y)Bot Top y
        = \f,x,y.(\x',_,y.f(x' Top)y)(\_,y.x y)Bot Top y
        = \f,x,y.(\_,y.f((\_,y.x y) Top)y)Bot Top y
        = \f,x,y.(\_,y.f(\y.x y)y)Bot Top y
        = \f,x,y.(\_,y.f x y)Bot Top y
        = \f,x,y.(\y.f x y)Top y
        = \f,x,y.f x Top y
        = \f,x.f x Top
#]
then #push'#
#[
        push' (\f,x.f x Top)
        = \f,x,y.(\x',d,y.div d|f(\y.x' Bot y)y)(\y,d.div d|x y)Top Bot y
        = \f,x,y.(\d,y.div d|f(\y.(\y,d.div d|x y)Bot y)y)Top Bot 
        = \f,x,y.(\y.div Top|f(\y.(\y,d.div d|x y)Bot y)y)Bot 
        = \f,x,y.(\y.Top|f(\y.(\y,d.div d|x y)Bot y)y)Bot 
        = \f,x,y.(\y.Top y)Bot 
        = \f,x,y.Top Bot 
        = \f,x,y.Top
        = Top
#] }
\Ex{ #\f,x,u.f.\_.x.f Bot Bot#:
}
\Ex{ #\f,x,u.f x f# }
\Ex{ #\f,x,u.f x f u# }
\Ex{ #\f,x.x f# }
\Ex{ #\f,x,u.x f# }

\Thm{ #inhab(nat) = {Bot,0,0',1,1',2,2',...,omega} #.}
\Pf{
\bf{Patching.}
To show correct patching, we need for any term #M# below #n# but incompatable
with any feasible approximation of #n# to be raised to (at least) #n#.
Consider any isolated point with B\"ohm tree ...
Then ???

\bf{Checking.} ???
}
#}

#fixed-point: #(a->a)->a#
repair_fix := <S I>.
div_fix := <I>.
pull_fix := pull_church * K.
...

#binary string: #(a->a)->(a->a)->a->a#
repair_bstring := <
    \x,f,f',x0.f(x f f' x0),
    \x,f,f',x0.f'(x f f' x0),
    \f,f',x0.x0
>.
fill_bstring := (\s,f,f',x0,y.
    fill := (\f,x,y,_.f(\y.x y Top)y).
    s(fill f)(fill f')(\y,_.x0 y)y Top
).
push_bstring := (\s,f,f',x0,y.
    push := (\f,x,_,y.f(\y.x Top y)y).
    s(push f)(push f')(\_,y.x0 y)Top y
).
fill_bstring' := (\s,f,f',x0,y.
    fill := (\f,x,y,d.div d|f(\y.x y Bot)y).
    s(fill f)(fill f')(\y,d.div d|x0 y)y Bot
).
push_bstring' := (\s,f,f',x0,y.
    push := (\f,x,d,y.div d|f(\y.x Bot y)y).
    s(push f)(push f')(\d,y.div d|x0 y)Bot y
).
div_bstring := div*<I,I,Bot>.

#binary stream: #(a->a)->(a->a)->a#
repair_bstream := <\x,f,f'.f(x f f'), \x,f,f'.f'(x f f')>.
fill_bstream := (\s,f,f',y.
    fill := (\f,x,y,_.f(\y.x y Top)y).
    s(fill f)(fill f')y Top
).
push_bstream := (\s,f,f',y.
    push := (\f,x,_,y.f(\y.x Top y)y).
    s(push f)(push f')Top y
).
fill_bstream' := (\s,f,f',y.
    fill := (\f,x,y,d.div d|f(\y.x y Bot)y).
    s(fill f)(fill f')y Bot
).
push_bstream' := (\s,f,f',y.
    push := (\f,x,d,y.div d|f(\y.x Bot y)y).
    s(push f)(push f')Bot y
).
div_bstream := div*<I,I>.

#church list: #(a->b->b)->b->b#
example_list := (\f,y0.f K.f F.f F.f K y0).
repair_list := <\h,t,f,y0.f h(t f y0), \f,y0.y0>.
fill_list := (\l,f,y0,z.l
    (\x,y0',z,_.f x(\z.y0' z Top)z)
    (\z,_.y0 z)
    z Top
).
push_list := (\l,f,y0,z.l
    (\x,y',_,z.f x(\z.y' Top z)z)
    (\_,z.y0 z)
    Top z
).
fill_list' := (\l,f,y0,z.l
    (\x,y0',z,d.div d|f x(\z.y0' z Bot)z)
    (\z,d.div d|y0 z)
    z Bot
).
push_list' := (\l,f,y0,z.l
    (\x,y',d,z.div d|f x(\z.y' Bot z)z)
    (\d,z.div d|y0 z)
    Bot z
).
div_list := <F,Bot>.
pull_tree := ???. #this requires choices

#binary tree: #(a->b)->(b->b->b)->b#
example_tree := (\l,b.b(b(l K)(l F))(l K)).
repair_tree := <\y,y',l,b.b y y', \x.l,b.l x>.
fill_tree := (\t,l,b,z.t
    (\x,z,_.l x z)
    (\y,y',z,_.b(\z,_.y z)(\z,_.y' z)z)
    z Top
).
push_tree := (\t,l,b,z.t
    (\x,_,z.l x z)
    (\y,y',_,z.b(\_,z.y z)(\_,z.y' z)z)
    Top z
).
fill_tree' := (\t,l,b,z.t
    (\x,z,d.div d|l x z)
    (\y,y',z,d.div d|b(\z,d.div d|y z)(\z,d.div d|y' z)z)
    z Top
).
push_tree' := (\t,l,b,z.t
    (\x,d,z.div d|l x z)
    (\y,y',d,z.div d|b(\d,z.div d|y z)(\d,z.div d|y' z)z)
    Top z
).
div_tree := <Bot,join>.
pull_tree := ???. #this requires choices

