
Types as Closures. (a sketch of lib/types.jtext)

  The type-of-types is the universal closure #close# (see axioms section)
  ###<
    !check close : close.
    !check close->close : close.
    !check (/\a:close. a->any:close).
    !check (/\b:close. any->b:close).
    !check (/\a:close. a->a:close).
    !check (/\a:close, b:close. a->b:close).
  ###>
  Note that #Top# inhabits every closure
  ###<
    !check (/\a:close. Top:a).
  ###>

  Rather than a powerset construction, we have the subtype close
  ###<
    Sub := both.
    !check Sub : close->close.
  ###>
  and upper sets
  ###<
    Above := join.
  ###>
  Later we will also see lower-powerdomains.
  Question: Are singletons definable uniformly from codes?

  Simple Types. 
    We begin with two concurrent section-retract pairs
    ###<
      raise := (\x,_.x).
      lower := (\x.x Top).
      !check lower*raise = I.
      !check raise*lower : close.
    ###>
    and
    ###<
      raise' := (\x,b. div b | x).
      lower' := (\x.x Bot).
      !check lower'*raise' = I.
      !check raise'*lower' : 2.   #idempotent
    ###>
    Observe that #lower#ing "fills in" with #Top#'s, #lower f=f Top#,
    and #I->lower#ing pushes out with #Tops#
    Define for a moment compound raising and lowering operators
    ###[
      R m n = (n I->raise)*(m raise)
      L m n = (m lower)*(n I->lower)
    ###]
    so that #L m n# places the first argument of #f# into a minefield of
    errors, and #R m n# navigates among #m+n# errors to find that argument
    ###[
      L m n = \f,x.f Top^^m x Top^^n
      R m n = \f,w1,...,w_m,x,y1,...,y_n. f x
      (L m n) * (R m n) = I
    ###]
    We similarly define #L'# and #R'#, which place the argument in empty space,
    and check that empty space for errors, resp.

    Our technique to enforce correct typing is to wrap a term #q# in question
    in all possible such minefield,map pairs.

    We represent types in arrow notation and require the variance to be
    specified.
    ###<
      T_var := (\v,_,_. v).
      T_const := (a,_,c,_. c a).
      T_arrow := (\a,b,_,_,f. f a b).
      patch_T := (
          <raise,lower>.
          Y\s. \a,a'. <a', \b. b, \t1,t2. (s a' a t1)->(s a a' t2)>
      ).
      check_T := (Y\c. <I, \_. I, \a,b. \x. c a x|c b>).
    ###>
    ###<
      Simple := any->close (
          \f. f I I
            | f raise lower
            | f raise' lower' 
            | f I->raise I->lower
            | f I->raise' I->lower'
      ).
    ###>
    for example
    ###<
      !check div = close (Simple \a,a'. a').
      semi := close (
          (Simple \a,a'. a->a')
          | <I>
      ).
      unit := semi & Above I.
      check := any->unit.
      checked := check->close (\c,x.c x x).
      bool := close (
          (Simple \a,a'. a->a->a').
          | checked <I,I>
          | <K,F>
          | \q. q Bot (q Top Bot)
              | q (q Bot Top) Bot
      ).
    ###>
    ###<
      Maybe := close->close (
          \a. (Simple \b,b'. b->(a->b)->b')
    ####        | checked <I,\_.I> #note that something isn't checked
            | <\n,_. n, \x,_,s. s x> #repair, # = <none, some>
            | \q. q Bot (q Top Bot)
                | q (q Bot Top) Bot
      ).
      Sum := close->close->close (
          \a,b. (Simple \c,c'. (a->c)->(b->c)->c')
    ####          | checked <\_.I,\_.I>
              | <\x,l,_.l x, \y,_,r.r x> #repair, # = <inl, inr>
              | \q. q Bot (q Top Bot)
                  | q (q Bot Top) Bot
                  | \f,g. q (K I) Bot (q f Top)
                        | q Bot (K I) (q Top g)
      ).
      Sset := close->close (
          \a. (Simple \b,b'. (a->b)->b')
            | <\x.<x>>
      ).
      Prod := close->close->close (
          \a,b. (Simple \c,c'. (a->b->c)->c')
              | <\x,y.<x,y>>
              | \q. <q K, q F>
      ).
    ###>
    three types of numerals
    ###<
      nat := close (
          Y \a. (Simple \b,b'. (b'->b)->b->b')
              | <\n:a,f:a->a,x:a.f.n f x, \_,x:a.x>      #repair
              | checked (Y\c:check. <\x. I|x, I>)
              | \q. q Bot (q Top Bot)
                  | q (q Bot Top) Bot
      ).
      nat' := close (
          Y \a. (Simple \b,b'. (a->b'->b)->b->b')
              | <\n1:a,n2:a,f:a->a,x:a. n:=n1|n2. f n.n f x, \_,x:a.x>  #repair from left
              | <\_,n:a,f:a->a,x:a.f n.n f x, \_,x:a.x>  #repair from right
              | checked (Y\c:check. <\n,x.I|c n|x, I>
              | \q. q Bot (q Top Bot)
                  | q (q Bot Top) Bot
      ).
      num := close (Y Maybe).
    ###>
    and enumerations
    ###<
      Enum := close->close (\a. Y\b. Prod (Maybe a) (Prod b b)).
      idx := close (Y\a. Maybe. Sum a a).
    ###>
    Thm: ??? #Simple# works ???
  Correctness Proofs. 
    inhab(nil)

  Atomic Types. 
    Takeout: Wadler (Wadler98) describes an analysis of theorems true of a
      typable term with a normal form, visible from only the term's type.

    The Maximal type
    ###<
      any := I.
      !check close : any->close.
      !check close : any->close.
      !check any : close.
      !check any = close Bot.
      !check any = any->any.      #whence a reflexive object
    ###>
    We can now show that
    ###<
      !check Sub any = close.     #everything is a subtype of #any#
      !check Above : any->close.  #upper-sets are types
    ###>

    The Minimal type #nil# has no consistent inhabitants
    ###<
      nil := Top.
      !check nil : close.
      !check Bot !: nil.
      !check Sub nil = K nil. #i.e., the only subtype of #nil# is #nil# itself
    ###>

    The type of divergent computations was introduced in section
    \ref{sec:axioms/types}.
    ###<
      !check div = close raise.
      !check div = close lower.
    ###>
    The endpoints #{Bot,Top}# will be used as the space of truth values for
    _probing_logic_ (discussed in Section \ref{sec:lib/logic}):
    ###<
      probe := any->div.
      Probe := close->close (\a. a->div).
      !check K Bot,K Top : probe. #the maximal and minimal probes
    ###>
    for now we need only the probing disjunction
    ###<
      or_div := div->div->div (\x,y. x|y).
    ###>

    TODO: abstract the common type constructions, put these in the first
    section, and then give examples in the rest of the sections.

    Prior to Boolean values are the "semiboolean" or "lifted unit" values of
    Sierpinski space #{Bot,I,Top}#.
    The construction and proof of correctness for #semi# will be the prototype
    for more complicated constructions.
    The proof of correctness for #semi# is broken in two parts,
    "patching" and "checking".
    Def: Let #A# be a set of terms closed under intersection.
      * a term #M# is _dominated_by_ #A# iff for some #M' in A#, #M[=M'#.
      * A term #p=]I# _patches_ #A# iff for every #M# dominated by #A#, #p#
        (eventually) raises #M# to the least #M'# in #A# dominating #M#; i.e.
        ###[
          close p M = Meet{M' in A|M[=M'}
        ###]
      * a term #c# _checks_ #A# iff
        (i) for every #M in A#, #c M=I#; and
        (ii) for every #M# dominated by no #M' in A#, #c M'=Top#.
    Lem: Let #A# be as above, and suppose #p# patches #A# and #c# checks #A#.
        Then #p&W c# is a closure with retract #A#.
    Pf: Consider any #M#.  If #M# is dominated by #A#, then
      ###[
          (p&W c)M =] close p M = Meet{M' in A|M[=M'} =] M
      ###]
      Since #A# is closed under meets, #patch M in A#.
      If moreover #M in A#, also #p M=M# and #c M=I#, so #W c M=M#,
      and hence #(p&W c)M=M#.
      Finally, if #M# is not dominated by #A#, then
      #(p&W c)M =] W c M = c M M = Top M = Top#.
    Note that if #Top in A# then patching alone suffices.

    \paragraph{Patching.}
    First, suppose #M!=Bot# is any convergent term approximating #I#.
    Then in particular, #M# extends an isolated point, say with B\"ohm tree
    \[ \xymatrix@R=2mm@C=0mm{
        &&&{#\u,_v_.u#}
           \ar@{-}[dlll]\ar@{-}[dl]\ar@{-}[dd]\ar@{-}[dr]\ar@{-}[drrr]
           &&&&{\text{#|_v_|+1=k_v+1# vars total}}\\
        {#Bot#}&{\dots}&{#Bot#}&&{#Bot#}&{\dots}&{#Bot#}
              &{\text{#k_v# args total}}\\
        &&&{#\_w_.v#}
             \ar@{-}[dlll]\ar@{-}[dl]\ar@{.}[ddd]\ar@{-}[dr]\ar@{-}[drrr]
           &&&&{\text{#|_w_|=k_w# vars total}}\\
        {#Bot#}&{\dots}&{#Bot#}&&{#Bot#}&{\dots}&{#Bot#}
              &{\text{#k_w# args total}}\\
        &&&&&&&{\vdots}\\
        &&&{#\_y_.x#}
             \ar@{-}[dlll]\ar@{-}[dl]\ar@{-}[dd]\ar@{-}[dr]\ar@{-}[drrr]
           &&&&{\text{#|_y_|=k_y# vars total}}\\
        {#Bot#}&{\dots}&{#Bot#}&&{#Bot#}&{\dots}&{#Bot#}
            &{\text{#k_y# args total}}\\
        &&&{#\_z_.y#}\ar@{-}[dl]\ar@{-}[dr]
           &&&&{\text{#|_z_|=k_z# vars total}}\\
        &&{#Bot#}&{\dots}&{#Bot#}&&
              &{\text{#k_z# args total}}\\
    } \]
    where the head variables and numbers of arguments are compatable with
    (a finite #eta#-expansion of) #I#.

    We can descend down the B\"ohm tree by sequences of moves
    ###[
      i  |->  \x. i [n_1+1 / n_1+1+n_2] Top^^n_1 x Top^^n_2
    ###]
    selecting out an argument amid #n_1+n_2# errors.
    Recalling the definition of selectors
    ###[
      [1/1] = I
      [1/n+1] = K*[1/n]
      [m+1/n+1] = K[m/n]
    ###]
    we decompose the join over all possible such moves into a join over 
    "fills" on the right followed by "pushes" from the left:
    ###[
      \i. Join n_1,n_2=>0. \x. i[n_1+1/n_1+1+n_2]Top^^n_1 x Top^^n_2
          = (\i. Join n_1=>0. \x. i [1/n_1+1] Top^^n);
              (\i. Join n_2=>0. \x. i (n_2 K c) Top^^n x)
          = (\i.Y\y.i I|\c,x.y i K*c x Top); close (\i,c.i(K c)Top)
          [= <I> & (\i,c,x.i K*c x Top) & (\i,c.i(K c)Top) #still valid for #I
          =: repair_semi & fill_semi & push_semi
    ###]
    where the third step uses the fact that #x&y=x&close y#.
    ###<
      repair_semi := <I>.
      push_semi := raise->lower.
      fill_semi := (I->raise)->(I->lower).
      !check push_semi = (\i,x,y. i(\_,y.x y)Top y).
      !check fill_semi = (\i,x,y. i(\y,_.x y)y Top).
      !check (t := repair_semi. I:t and Bot:t).
      !check (t := fill_semi. I:t and Bot:t).
      !check (t := push_semi. I:t and Bot:t).
    ###>
    Lem: #repair_semi & fill_semi & push_semi# patches #{Bot,I}#, i.e.
      maps the interval #[Bot,I]# to the two-point domain #{Bot,I}#.

    \paragraph{Checking.}
    In this special case of #semi#, we will confuse the check with the closure
    #W check_semi#, as either will yield #I#.
    ###<
      !check W*semi = semi.
    ###>

    Any #M[!=I# converges and extends an isolated point incompatable with #I#,
    say with B\"ohm tree
    \[ \xymatrix@R=2mm@C=0mm{
        &&&{#\u,_v_.u#}
           \ar@{-}[dlll]\ar@{-}[dl]\ar@{-}[dd]\ar@{-}[dr]\ar@{-}[drrr]
           &&&&{\text{#|_v_|+1=k_v+1# vars total}}\\
        {#Bot#}&{\dots}&{#Bot#}&&{#Bot#}&{\dots}&{#Bot#}
              &{\text{#n_v=k_v# args total}}\\
        &&&{#\_w_.v#}
           \ar@{-}[dlll]\ar@{-}[dl]\ar@{.}[ddd]\ar@{-}[dr]\ar@{-}[drrr]
           &&&&{\text{#|_w_|=k_w# vars total}}\\
        {#Bot#}&{\dots}&{#Bot#}&&{#Bot#}&{\dots}&{#Bot#}
              &{\text{#n_w=k_w# args total}}\\
        &&&&&&&{\vdots}\\
        &&&{#\_y_.x#}
           \ar@{-}[dlll]\ar@{-}[dl]\ar@{-}[dd]\ar@{-}[dr]\ar@{-}[drrr]
           &&&&{\text{#|_y_|=k_y# vars total}}\\
        {#Bot#}&{\dots}&{#Bot#}&&{#Bot#}&{\dots}&{#Bot#}
              &{\text{#n_y=k_y# args total}}\\
        &&&{#\_z_.y'#}\ar@{-}[dl]\ar@{-}[dr]
           &&&&{\text{#|_z_|=k_z# vars total}}\\
        &&{#Bot#}&{\dots}&{#Bot#}&&
              &{\text{#n# args total}}\\
    } \]
    where, witnessing incompatability, either #y'!=y# or #k_z!=n#
    (possibly both).
    To check for the former error #y'!=y#, it is enough to raise the bottom
    of the tree up and ensure #y'# is indeed the head variable.
    Since we were careful to substitute convergent terms for all other
    variables, it is enought to substitute #Bot# for #y# and ensure #y'#
    diverges:
    ###<
      check_head := <Bot>;close<Top>. #not quite a type
      !check check_head = div*<Bot>.
      !check (t := close check_head. I:t and Bot:t).
    ###>
    Finally we must check for argument count errors at the bottom of the
    B\"ohm tree.  In this case, we can select some far-out position #n#,
    input #Top#s for everything up to position #n# and #Bot# for #n#,
    and make sure the result diverges.
    This procedure is already covered by
    ###[
      n push_semi; check_head
    ###]
    Lem: #push_semi & check_head# checks semibooleans.
    The construction is thus complete:
    ###<
      semi := fill_semi & push_semi & check_head & <I>.
      !check I:semi and Bot:semi.
      !check div (= semi.
    ###>
    where we order the components most-complicated-to-simplest.
    Thm: #inhab(semi) = {Bot,I,Top}#
    Pf: Patching and checking were shown in previous lemmas.
    Sierpinski space will be used as the space of truth values for
    _testing_logic_ (discussed in Section \ref{sec:lib/logic}):
    ###<
      test := any->semi.
      Test := close->close (\a. a->semi).
      !check K I,K Bot,K Top : test. #the maximal and two minimal tests
    ###>

    The unit type has inhabitants #{I,Top}#,
    with a unique consistent inhabitant.
    ###<
      unit := semi & Above I.
      !check unit = semi & K I.
      !check I : unit.
      !check Bot !: unit.
      !check unit (= semi.
    ###>
    Thm: #inhab(unit) = {I,Top} #.
    Pf: #inhab(unit) (= inhab(semi)#; individual containment was just checked.
    #{I,Top}# will be used as the space of truth values for _checking_logic_
    (discussed in Section \ref{sec:lib/logic}):
    ###<
      check := any->unit.
      Check := close->close (\a. a->unit).
      !check K I,K Top : check. #the maximal and minimal checks
      #Note that checks can easily be made into closures:
      !check W*check : check->close.
    ###>
    Note: We now know the entire semilattice of subtypes under #semi#:
      \[ \xymatrix@R=4mm@C=4mm{
          &{#semi#} \ar@{-}[dl]  \ar@{-}[dr]
          \\{#div#} \ar@{-}[dr]
          &&{#unit#} \ar@{-}[dl]
          \\&{#nil#}
      } \]

    The boolean type is like a widened #semi#, inhabited by #{Bot,K,F,Top}#.
    The easiest way to define #bool# is via #semi#:
    ###<
    bool := close (neg:=B' C. close neg->neg. \x. (semi.x Bot) (semi.x Top) F).
    ###>
    Thm: #inhab(bool) = {Bot,K,F,Top} #.
    Pf: That the claimed inhabitants are fixed by #bool# follows from
      simple reduction.
      Now let #M!=Bot# be any convergent term.
      To show #bool# patches #F#, assume #M Bot!=Bot#;
        then #semi(M Bot)=]I#, so #M=]K I=F#.
      Now #bool(=neg->neg#, i.e., #bool = neg*bool*neg#,
        so also #bool# patches #K#.

      To show #bool# checks correctly, suppose #M# is incompatable with both #K#
      and #F#.  Then in particular, #M Top# must be incompatable with #F#,
      whence #semi(M Top)=Top# and so #bool M=Top#.
    ###<
      !check Bot:bool and K:bool and F:bool.
      !check div (= bool.
    ###>

    A more illustrative construction mimics that of #semi#.
    ###<
      repair_bool := <K,F>.
      push_bool := raise->raise->lower.
      fill_bool := (I->raise)->(I->raise)->(I->lower).
      !check push_bool := (\i,c,c'. i(K c)(K c')Top).
      !check fill_bool := (\i,c,c',x. i K*c K*c' x Top).
      check_head_2 := (
          \q. or_div
          (<q>. <Bot>; close <Top>)
          (<q>. <Top,Bot>; close <Top>)
      ).
    ###>
    Lem: #fill_bool&push_bool&check_head_2&repair_bool = bool#.
    Pf: ???
    ###<
      !check fill_bool&push_bool&check_head_2&repair_bool = bool.
    ###>

    Takeout: OLD:
      We call this type #boool#, the ``square'' of Sierpinski space
      to a diamond of values below #Top#.
      With concurrency it has inhabitants #{Bot,K,F,join,Top}#, but may have more
      inhabitants in extensions, e.g., sub-probability values in stochastic
      #\#-calculus.
      Our definition conveniently remains fixed regardless of extention, and thus
      provides a unifying framework for studying various types of uncertainty
      and their interplay.
      ###<
        boool := fill_bool & push_bool & check_head_2 & repair_bool.
        !check Bot:boool and K:boool and F:boool and join:boool.
        !check bool (= boool.
      ###>
      Thm: #inhab(boool) = {Bot,K,F,join,Top}#.
      Pf: ???
      Note that #boool# can be checked-up to #bool# by enforcing sequentiality
      Note that #boool# can be constructed more algebraically by
      ###<
        boool := close (neg:=B' C. close neg->neg. \x. (semi.x Bot) (semi.W x) F).
        !check Bot:boool and K:boool and F:boool and join:boool.
        !check bool = boool & (\f.f(f K Top)(f Top F)).
        !check bool = boool & (\f.f(f f Top)(f Top f)).
      ###>
      Note: The entire semilattice of subtypes under #boool# is:
        \[ \xymatrix@R=4mm@C=4mm{
            &{#boool#} \ar@{-}[d]
            \\&{#bool#} \ar@{-}[dl]  \ar@{-}[dr]
            \\{#semi_K#} \ar@{-}[d] \ar@{-}[dr]
            &&{#semi_F#} \ar@{-}[d] \ar@{-}[dl]
            \\{#unit_K#} \ar@{-}[dr]
            &{#div#} \ar@{-}[d]
            &{#unit_F#} \ar@{-}[dl]
            \\&{#nil#}
        } \]
        where the nonstandard units and semibooleans are suitably defined.

    The partial analog of a total set will be called a #semiset#:
    the characteristic function has #semi# values rather than #bool#ean.

    LATER discuss recursive vs. r.e. sets here

    We represent semisets as concurrent terms of simple type #(any->a)->a#, e.g.
    ###[
      {} = Bot
      {0} = <0>
      {0,1,2} = <0>|<1>|<2>
      {0,1,2,...} = (Y\n.<n>|y(succ n))0
    ###]
    LATER define types-as-??? now?
    Polymorphic semisets of type #/\<p:close,c:Check p>.(p->a)->a#
    are also representable.
    Def: A term #M# is a _proper_semiset_ iff for some set #A#,
      #M = Join{<x> | x in A} #.
      In particular #Bot#, but not #Top#, is not proper.
      If #a# is a closure, then #M# is an #a#-semiset iff the #A# above may be
      restricted to a subset of #inhab(a)#.
    We construct the semiset type in two parts, patching and checking.
    ###<
      patch_sset := close (I->raise)->lower.
      patch_Sset := close->close (\p. (p->raise)->lower).
      !check patch_sset = close (\s,f.s(\x,_.f x)Top).
      !check patch_Sset = close->close (\a,s,f.s(\x:a,_.f x)Top).
      check_sset := close (\s. unit \x.s.K x).
      check_sset := (\s. unit \x.s.K x).
    ###>
    Lem: #<Top># is the largest proper semiset.
    Lem: #chck_sset# checks semisets.
    Pf: In particular, #M# is incompatable with #<Top>=\f.f Top#. ???
    Lem: #patch_sset# patches semisets.
    Pf: ???
    ###<
      semiset := patch_sset & W check_sset.
      Semiset := (\a. patch_Sset a & W check_sset).
    ###>
    Cor: 
      * #inhab(semiset) = {Top} union# "proper semisets";
      * for any #a:close#, #inhab(Semiset a) = {Top} union#
        "proper #a#-semisets".

    The most important type of semisets are the singletons.
    ###<
      patch_sgtn := join <Bot>.
      check_sgtn := Endo semiset (\s.s\x.<x>).
      sgtn := Sub semiset (patch_sgtn & check_sgtn).
      !check sgtn (= semiset.
    ###>
    Thm: #inhab(sgtn) = {Top} union {<x>|x:any}#
    Pf: #sgtn# is clearly a subtype of #semiset#.
      The emptiset is not a singleton since #sgtn Bot=<Bot>!=Bot#.
      Any set with multiple elements is mapped to the singleton of the join
      of those elements.

    We also have lifted singletons, or parametrized #semi#
    ###<
      Semi := (/\a:close. Sub. Semiset a) check_sgtn. #XXX bad name convention
      !check Bot : Semi any.
    ###>

    The construction of singletons #(any->a)->a# suggests a similar
    construction for pairs #(any->any->a)->a#.
    We first define a semiset of pairs
    ###<
      patch_sset_2 := (I->I->raise)->lower.
      !check patch_sset_2 = (\s,f.s(\x,x',_.f x x')Top).
      check_sset_2 := (\s. unit \x.s.K.K x).
      semiset_2 :=  patch_sset_2 & W check_sset_2.
    ###>
    and then the pair type
    ###<
      pair := close (\s:semiset_2. <s K,s F>).
    ###>
    Thm: #inhab(pair) = {Top} union {<x,x'> | x,x':any} #.
    Pf: ???
    Note the following properties
    ###<
      !check (\x.<x>) : any->sgtn.
      !check (\x.<x,x>) : any->pair.
      !check (\x,y.<x,y>) : any->any->pair.
    ###>
    Note that tuples with #nil# elements needn't be #nil#
    (but this can be checked):
    ###<
      !check <Top> : sgtn.
      !check <Top> != Top.
      !check <Top,Top> : pair.
      !check <Top,Top> != Top.
    ###>

  Church-style Types. 
    \footnote{not to be confused with \emph{typing \`a la Church},
        as opposed to \emph{typing \`a la Curry} (Barendregt2006)}

    Until now, all the atomic types we have defined
    --#nil, semi, boool, num#, etc.-- have been inhabited by affine terms.
    Church's types are generally inhabited nonaffine terms, e.g.,
    Church numerals greater than 1.
    Qstn: Is there a definable type for Church types?

    Church defined list and numeral types as self-reducing objects
    (XXX \cite{???}), roughly as
    ###[
      nat = (a->a)->(a->a)
      list = (any->a->a)->a->a
      stream = (any->a->a)->a
      tree = (a->a->a)->(any->a)->a
      On = ???->(a->a)->a->a
    ###]
    Polymoprhic variants have been used since the development of system $F$
    (XXX \cite{???}).
    Surprisingly, although Hstarc models #omega#-order polymorphism, the
    non-polymorphic or #raw# Church numerals are more basic.

    \paragraph{Church numerals #(a->a)->a->a#}
    The patch and check for numerals are more complicated,
    and will illustrate the method of B\"ohming out for checks,
    later to be employed in more complicated types.
    Def: The _Church_numerals_ are the terms
      ###[
        \f.Bot = 0'         ##\f.I = 0,
        \f.f*Bot = 1'       ##\f.f = 1,
        \f.f*f*Bot = 2',    ##\f.f*f = 2,
        ...                 ##...
        \f.Y(B f) = omega
      ###]
    The patching operator follows naturally as a section-retract pair:
    ###<
      raise_1 := lower->raise.
      lower_1 := raise->lower.
      patch_nat := close raise_1->lower_1.
    ###>
    Lem: #patch_nat# patches Church numerals (and their meets).
    Pf: XXX Examine B\"ohm trees...
      XXX If at any level #f_hat=]f#, then by cofiniteness at least
      #f_hat=](n lower;n raise)f=\x_1,...,x_n.f Bot^^n# for some #n#.
      Then #n# applications of #patch_nat# will patch #f_hat# up to #f#.

    For the checking operation, we will need some functions for arithmetic,
    tuples, selection and indexed joins, untyped for now but later to be
    redefined as typed (see section \ref{sec:lib/untyped} above).

    We define the indexed-join form
    ###<
      check_nat := check (\q.
          #join over an unavoidable set
          join_over_nats \n_1.
          join_over_nats \n_2.
          n := n_1+1+n_2.

          #define arguments
          label := bool.
          encode := (\w:label,a. mk_tup (1+n) <w,a>).
          arg_1 := (\a. encode [1/2]  a  ).   #takes one arg
          arg_2 := (\.  encode [2/2] Top ).   #takes no args

          #check dependence deep in tree
          #(recall that #q M_1...M_n = <q>.<M_1>;...;<M_n>)#
          unit \x. <q arg_1 arg_2>.  

          #traverse all paths down B\"ohm tree
          close (
              n<Top>; <sel 1 (1+n)>;      #descend
              \<w:label,a>. w a Bot       #check whether to stop
          );

          #select out #x#
          n_1<Top>; <x>; n_2<Top>;
          <sel (1+n_1+1) (1+n)>
      ).
    ###>
    Lem: #check_nat# checks Church numerals.
    Pf: XXX descend down B\"ohm tree...
    ###<
      nat := patch_nat & W check_nat.
    ###>
    Cor: #inhab(nat) = {Top} union# "the Church numerals".

    LATER: parametrized tuples and selectors:
    ###<
      tuple := nat->close (???).
      !check tuple 0 = semi.
      !check tuple 1 = sgtn.
      !check tuple 2 = pair.

      selector := nat->close (???).
      !check selector 0 = div. #XXX: is this right?
      !check selector 1 = semi.
      !check selector 2 = bool.
    ###>

    \paragraph{Lists #(any->a->a)->a->a#}
    LATER: also the polymorphic version
    ###<
      patch_list := close (I->raise_1)->lower_1.
    ###>
    Def: _lists_ are terms such as
      ###[
        \r,s. s.
        \r,s. r M_1 s.
        \r,s. r M_1. r M_2 s.
        ...
        \r,s. r M_1. r M_2. ... . r M_n s. 
      ###]
      for various #M_i#'s, and their meets.
    Lem: #patch_list# patches lists.
    ###<
      check_list := (\q.
          #join over an unavoidable set
          join_over_nats \n_1.
          join_over_nats \n_2.
          n := n_1+1+n_2.

          #define arguments
          label := bool.
          encode := (\w,a. mk_tup (1+n) <w,a>).
          arg_1 := (\a,b. encode [1/2] <a,b> ).   #takes two args
          arg_2 := (\.    encode [2/2] Bot ).     #takes no args

          #check dependence deep in tree
          unit \x. <q arg_1 arg_2>.

          #traverse all paths down B\"ohm tree
          close (
              n<Top>; <sel 1 (1+n)>;
              \<w:label,a>. w (a[2/2]) Bot)
          );

          #select out #x#
          n_1<Top>; <x>; n_2<Top>;
          <sel (1+n_1+1) (1+n)>
      ).
    ###>
    Lem: #check_list# checks lists
    Pf: ???
    ###<
    list := patch_list & W check_list.
    ###>
    Cor: #inhab(list) = # ``the lists''.

    \paragraph{Trees #(any->a)->(a->a->a)->a#}
    LATER also polymorphic version
    ###<
      raise_2 := lower_1->raise.
      lower_2 := raise_1->lower.
      patch_tree := (I->raise)->raise_2->lower.
    ###>
    Lem: #patch_tree# patches trees.
    Pf: ???
    In the tree type we first see ambiguously branching B\"ohm trees.
    ###<
      check_tree := (\q.
          #join over an unavoidable set
          join_over_nats \n_1.
          join_over_nats \n_2.
          n := n_1+1+n_2.

          #define arguments
          encode := (\w,a. mk_tup (1+n) <w,a>).
          arg_1 := (\b,b'. encode K <b,b'> ). #takes two args
          arg_2 := (\a.    encode F a ).      #takes one arg

          #define valid B\"ohm tree moves
          decode := n<Top>; <sel 1 (1+n)>.
          move_1 := (decode; \<w:bool,a>. w (a[1/2]) Bot).
          move_2 := (decode; \<w:bool,a>. w (a[2/2]) Bot).
          #note that #w# must be checked for sequentiality

          #check dependence deep in tree
          unit \x. <q arg_1 arg_2>.

          #traverse all paths down B\"ohm tree
          move_1 & move_2;

          #select out #x#
          n_1<Top>; <x>; n_2<Top>;
          <sel (1+n_1+1) (1+n)>
      ).
    ###>

  Compound/Polymorphic Types. 
    Various exponential types
    ###<
      From := (\a:close.a->any).
      To := (\a:close.any->a).
      Endo := (\a:close. a->a).         #endomorphisms
      Bin_op := (\a:close. a->a->a).    #binary operations
      Exp := (\a:close,b:close. a->b).
      !check From : close->close.
      !check To : close->close.
      !check Endo = W Exp.
      !check Endo : close->close.
      !check Bin_op : close->close.
      !check Exp : close->close->close.
    ###>
    Notn: Let #a^(-1)x := {y in D | a y = x}# be the fiber over #x#.
    Thm: For #f in D#, #f:Exp a b# iff
      (a) #f# is constant on #a#-fibers, and
      (b) #rng(f)(=inhab(b)#.
    Pf: ???

    Lower-Powerdomains support singletons, mapping, restriction,
    and, for closures, union.
    ###<
      emptiset := <Bot>.
      emptiset_2 := <Bot,Bot>.
      semiset := (\t,f,z. t \x. f x z) & Above emptiset.     #...of singletons
      semiset_2 := (\t,f,z. t \x,y. f x y z) & Above emptiset_2.  #...of pairs
    ###>
    Thm: #inhab(semiset) = {Top} union {Join {<x>|x in A} | A(=Model}#.
    Pf: ???
    ###<
      !check (/\x:any. <x>:semiset).                        #singleton
      !check (/\x:semiset,y:semiset. x|y:semiset).          #union
      !check (/\f:any,s:semiset. s(\x.<f x>):semiset).      #mapping
      !check (/\t:test,s:semiset. s(\x.<t x x>):semiset).   #restriction
    ###>
    Powerdomains also exist within each type
    ###<
      Emptiset := (\a:close. <a Bot>).
      Emptiset_2 := (\a:close. x:=a Bot. <x,x>).
      Semiset := close->close (\a. (\t,f,z.t\x:a.f x z) & Above(Emptiset a)).
      Semiset_2 := close->close (\a. (\t,f,z.t\x:a,y:a.f x y z) & Above(Emptiset_2 a)).
    ###>
    Thm: #inhab(Semiset a) = {Top} union {Join{<x>|x in A} | A(=close a}#.
    Pf: ???
    ###<
      !check semiset = Semiset any.
      !check (/\a:close, x:a. <x>:Semiset a).                       #singleton
      !check (/\a:close, x:Semiset a, y:Semiset a. x|y:Semiset a).  #union
      !check (/\a:close, b:close, f:a->b, s:Semiset a.          #mapping
          s(\x.<f x>):Semiset b
      ).
      !check (/\a:close, t:Test a, s:Semiset a.                 #comprehension
          s(\x.<t x x>):Semiset a
      ).
    ###>

    We define polymorphic tuple types
    ###<
      Sgtn := close->close (\a. Semiset a & (\t.<t I>)).
      Pair := close->close (\a. Semiset_2 a & (\t.<t K,t F>)).
      diag := (\x.<x,x>).
      !check sgtn = Sgtn any.
      !check pair = Pair any.
      !check (/\a:close, x:a. <x>:Sgtn a).
      !check (/\a:close, x:a. <x,x>:Pair a).
      !check (/\a:close, x:a, y:a. <x,y>:Pair a).
    ###>
    Thm: 
      (a) #inhab(Sgtn a) = {Top} union {<x> | x in inhab(a) }#.
      (b) #inhab(Pair a) = {Top} union {<x,y> | x,y in inhab(a) }#.
    Pf: ???
      ####\item By previous theorem, #x:sgtn ==> x=Top# or
      ####    #x in Join{<y> | y in A}#, for some #A(=inhab(a)#.
      ####    In the latter case, also
      #####[
      ####    Join {<y> | y in A} = x
      ####        = <x I>
      ####        = <Join {<y> | y in A} I>
      ####        = <Join {<y>I | y in A}
      ####        = <Join {y | y in A}>
      #####]
      ####    whence #A# must indeed have a maximum element #y'#, so #x=<y'>#.
      ####\item Similar.

    Products
    ###<
      Pair' := close->close (\a. \<x:a,y:a>:pair. <x,y>).
      Prod := close->close->close (\a,b. \<x:a,y:b>:pair. <x,y>).
      !check Pair' = Pair.
      !check Pair = W Prod.
      !check pair = Prod any any.
    ###>
    Notice that since
    ###<
      !check <Top,Top> != Top.
    ###>
    This is really a "dropped" product, so the usual inhabitation relation
    does not hold:
    ###<
      !check Prod nil nil != nil.
    ###>
    however, we will see in Section \ref{sec:lib/tests} that an existence
    theorem of this sort still holds
    Thm: Let #a:close,b:close# be types.  Then
      ###[
        inhab(Prod a b) = {Top} union {<x,y> | x in inhab(a), y in inhab(b)}
      ###] 
    Pf: ??? 

    Sums (coproducts); we want #Sum==/\a,b.(a->c)->(b->c)->c#
    ###<
      Sum := close->close->close (\a,b.
          \x. semi (\y. x (K y) Bot) (\f,_. x f Top)
            | semi (\y. x Bot (K y)) (\_,f. x Top f)
      ).
      sum := Sum any any.
      !check (/\a:close, a':close, b:close, f:a->b, f':a'->b, s:Sum a a'. (
          (f,f')s : b
      )).
      Copair := W Sum. #the diagonal version
    ###>
    ####Sum := close->close->close (\a,b. \<w:bool,x:w a b>:pair. <w,x>).
    ####sum := close (\<w:bool,x>:pair. <w,w I I x>).
    ####!check sum = Sum any any.
    ####!check sum (= Prod bool any.
    #####XXX: are these restrictive enough?
    ####!check (\f,f'.<<f,f'>>) : any->any->sum->any.
    ####!check (\a:close,a':close,b:close,f:a->b,f':a'->b. <<f,f'>>) : (
    ####    /\a:close,a':close,b:close. (a->b)->(a'->b)->(Sum a a')->b
    ####).
    #####{
    ####Thm: Let #a:close,b:close# be types.  Then
    #####[
    ####    inhab(Sum a b) = {Top}
    ####        union {<K,x> | x in inhab(a)}       ##x# is an #a#
    ####        union {<F,y> | x in inhab(b)}       ##y# is a #b#
    ####        union {<Bot,z> | z in Model}        ##z# is anything
    #####]
    ####Pf: ???
    #####}
    ####
    #####Concurrent Sums
    ####Suum := close->close->close (\a,b. \<w:boool,x:w a b>:pair. <w,x>).
    ####suum := close (\<w:boool,x>:pair. <w,w I I x>).
    ####!check suum = Suum any any.
    ####!check suum (= Prod boool any.
    #####{
    ####Thm: Let #a:close,b:close# be types.  Then
    #####[
    ####    inhab(Suum a b) = {Top}
    ####        union {<J,x> | x in inhab(a&b)}     ##x# is both an #a# and a #b#
    ####        union {<K,x> | x in inhab(a)}       ##x# is an #a#
    ####        union {<F,y> | y in inhab(b)}       ##y# is a #b#
    ####        union {<Bot,z> | z in Model}        ##z# is anything
    #####]
    ####Pf: ???
    #####}

    The special sum #Sum a nil# comes up often, and it is easier to use a
    type #Maybe==/\a.(a->b)->b->b#
    ###<
      Maybe := close->close (???).
      maybe := Maybe any.
      Some := (/\a:close. Maybe a) (\a,x,<j,_>. j x).
      some := maybe (\x,<j,_>. j x).
      none := maybe (\<_,n>. n).
      !check some = Some any.
      !check (/\a:close. (none : Maybe a)).
    ###>

    Lifted domains
    ###<
      Lift := ???.
    ###>
    ####Lift := close->close->close (\a,b. \<w:semi,x:w a>:pair. <w,x>).
    ####lift := close (\<w:semi,x>:pair. <w,w x>).
    ####!check lift = Lift any.
    #####{ Again this is really a ``dropped lift''
    ####Thm: Let #a:close,b:close# be types.  Then
    #####[
    ####    inhab(Lift a) = {Top} union {<I,x> | x in inhab(a)} union {<Bot,Bot>}
    #####]
    ####Pf: ???
    #####}

  Dependent Types. (quantifiers) 
    Universally quantified types.
    We define #Pi A t = /\a:A. t a# allowing the typing judgement
    ###-
         x : Pi A t
      ---------------- Pi-Def
      /\a:A. x a : t a
    ###-
    This is representable by
    ###<
      Pi := close->(close->close)->close (
          \A:close, t:A->close.
          close \x, a:A. t a(x a)
      ).
      !check Pi = (\A:close,t:A->close. /\a:A.t a). #verifying notation
    ###>

    ###{
    Existentially quantified types.
    We define #Sigma A t = \/a:A. t a# allowing the typing judgement
    ###-
           x : Sigma A t
      ----------------------- Sigma-Def
      \/a:A. x : Prod a (t a)
    ###-
    This is representable by
    ###<
      Sigma := close->(close->close)->close (
          \A:close, t:A->close.
          close \<a:A,x:t a>:pair. <a,x>
      ).
      !check Sigma = (\A:close,t:A->close. \/a:A.t a). #verifying notation
    ###>

  Recursive Types. 
    The recursion operator for Goedel-style types.
    ###<
      Rec := (
    ###>

    Coindctive Numerals, similar to Barendregt's.
    ###<
      num := close (Y \n. Maybe n).
      !check none : num.                #zero
      !check (/\x:num. (some x : num)). #successor
    ###>
    Thm: #num# is an adequate numeral system.
    Pf: By definition, we need only the following terms:
      ###[
        zero = none
        succ = some
        pred = (error, I)
      ###]

    Basic recursive datatypes
    ###<
      String := close->close (\a:close. Y\b:close. Maybe (Prod a b)).
      Stream := close->close (\a:close. Y\b:close. Prod a b).
      Dialog := close->close->close (\i,o. Y\a. Prod o. i->a).
    ###>
    Note that strings are (isomorphic to) particular types of trees
    ###<
      Tree := (close->close)->close->close (
          \Branch, leaf.
          Y \a. Sum leaf (Branch a)
      ).
    ###>

    Intersection types are definable for closures (but not general idempotents).
    Recall that
    ###<
      !check both = close->close->close (\a:close, b:close. close(a|b)).
    ###>
    a similar intersection can be defined over enumerably-many terms:
    ###[
      all_stream := (Stream close)->close (
          Y\a:(Stream close)->close.
          \<h,t>:Stream close.
          h & (a t)
      ).
    ###]

  Symmetry Types. 
    An interesting feature of the types-as-closures paradigm is the ability to
    define $M$-types for objects invariant under (the action of) a monoid $M$.
    For example the two-element group #{C,I}#
    (acting as always by left-application),
    permuting the first two arguments of a function,
    constitutes a "symmetric binary function type"
    ###<
      sym_bin_fun := close C.
      Sym_bin_fun := close->close->close (\a,b. a->a->b & sym_bin_fun).
      !check sym_bin_fun = Sym_bin_fun any any.
      !check sym_bin_fun (= (\f,x,y.f x y).
      !check sym_bin_fun (= (\f,x,y.f y x).
      !check join : sym_bin_fun.
      !check join = sym_bin_fun K.
      !check join = sym_bin_fun F.
      !check both : sym_bin_fun.
      !check K*K : any->sym_bin_fun. #doubly-constant functions
    ###>

    We will often use commutative binary operations
    ###<
      Comm_op := close->close (\a. Bin_op a & sym_bin_fun).
      !check Comm_op = W Sym_bin_fun.
      !check sym_bin_fun = Comm_op any.
    ###>

    Unordered pairs are the closures of pairs under swapping
    ###<
      Choose_2 := close->close (
          swap := (\<x,y>.<y,x>).
          \a:close. Pair a & swap
      ).
      Diag := (\a:close, x:a. <x,x>).
      !check Diag : (/\a:close. a->(Pair a)). #XXX fails
      !check Diag : (/\a:close. a->(Choose_2 a)).
      !check Choose_2 bool <K,F> = Choose_2 bool <F,K>.
    ###>

    An andvantage of closure types over projective types is the ability to
    represent invariance under the action of (countably or uncountably)
    infinite monoids.
    Consider for example functions of the tail of sequences, which are
    invariant under shifts in either direction:
    ###<
      Fun_of_tail := close->close->close (
          \a:close, b:close.
          \f:(Stream a)->b.
          fwd := (\s:Stream a. <Bot,s>).
          bwd := (\<_,t>:Stream a. t).
          f | f * fwd | f * bwd
      ).
    ###>
    An example of a function symmetric under an uncountable symmetry monoid
    (in fact group) is the #Check_stream# function on streams, invariant under
    the group of permutations of #omega#.

    Now we can conveniently define some logical types
    ###<
      Semipred := close->close (\a. a->unit).         #semipredicate
      Pred := close->close (\a. a->bool).             #predicate
      Bin_rel := close->close (\a. a->a->bool).       #binary relations
      Sym_bin_rel := (\a. Bin_rel a & sym_bin_fun).   #symmetric binary relation
    ###>
    We will see later that transitivity of a relation requires an enumerator,
    and reflexivity requires a separator/discriminator.

  Remarks and Open Questions. 
    Many types are defined in the form #absorb & collapse# where #absorb#
    absorbs further arguments and #collapse# ensures that proper joins of
    inhabitants are not proper inhabitants.
    For example, #bool#, #sgtn#, #pair#.
    Qstn: Can this be generalized?

